#!/usr/bin/env node

/**
 * Script pour supprimer tous les souvenirs de vin de la base de donn√©es
 * Utilise la cl√© service_role pour contourner les politiques RLS
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const SUPABASE_URL = "https://yzdyepdejftgqpnwitcq.supabase.co";
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl6ZHllcGRlamZ0Z3FwbndpdGNxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImiaWF0IjoxNzAwMDgwMDk5LCJleHAiOjIwNjU2NTYwOTl9.wGFjpAAoYtcLlk6o1_lgZb0EhX3NB9SoYQ_D1rOc2E0";

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function clearAllMemories() {
  console.log('üßπ Suppression de tous les souvenirs de vin...');
  console.log('==============================================');

  try {
    // 1. D'abord, compter combien il y a de souvenirs
    console.log('\n1Ô∏è‚É£ Comptage des souvenirs existants...');
    const { count: memoriesCount, error: countError } = await supabase
      .from('wine_memories')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå Erreur lors du comptage:', countError);
      return;
    }

    console.log(`üìä Nombre de souvenirs trouv√©s: ${memoriesCount || 0}`);

    if (memoriesCount === 0) {
      console.log('‚úÖ Aucun souvenir √† supprimer');
      return;
    }

    // 2. Supprimer d'abord les likes pour √©viter les probl√®mes de cl√©s √©trang√®res
    console.log('\n2Ô∏è‚É£ Suppression des likes de souvenirs...');
    const { error: deleteLikesError } = await supabase
      .from('wine_memory_likes')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprime tout

    if (deleteLikesError) {
      console.error('‚ùå Erreur lors de la suppression des likes:', deleteLikesError);
    } else {
      console.log('‚úÖ Likes supprim√©s');
    }

    // 3. Ensuite, supprimer tous les souvenirs
    console.log('\n3Ô∏è‚É£ Suppression des souvenirs...');
    const { error: deleteMemoriesError } = await supabase
      .from('wine_memories')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprime tout

    if (deleteMemoriesError) {
      console.error('‚ùå Erreur lors de la suppression des souvenirs:', deleteMemoriesError);
    } else {
      console.log('‚úÖ Souvenirs supprim√©s');
    }

    // 4. V√©rifier que tout a √©t√© supprim√©
    console.log('\n4Ô∏è‚É£ V√©rification...');
    const { count: finalCount, error: finalCountError } = await supabase
      .from('wine_memories')
      .select('*', { count: 'exact', head: true });

    if (finalCountError) {
      console.error('‚ùå Erreur lors de la v√©rification:', finalCountError);
    } else {
      console.log(`üìä Nombre de souvenirs restants: ${finalCount || 0}`);
      if (finalCount === 0) {
        console.log('üéâ Nettoyage termin√© avec succ√®s !');
      } else {
        console.log('‚ö†Ô∏è Il reste encore des souvenirs');
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
clearAllMemories();

